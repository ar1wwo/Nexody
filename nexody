#!/bin/bash

# Ensure correct encoding during file processing
export LANG=C.UTF-8
export LC_ALL=C.UTF-8

# Replace with your own Client ID and Client Secret
CLIENT_ID="c9d3a82d76744885b8e219f466e60370"
CLIENT_SECRET="0d52f2e6c353459aa994c11f08bfee1c"
PLAYLIST_ID="40Mx3bOxoddtOzRBZSf2Qf"
OUTPUT_FILE="playlist_tracks.csv"

# Get access token
ACCESS_TOKEN=$(./curl -s -X POST https://accounts.spotify.com/api/token \
  -d grant_type=client_credentials \
  -u "$CLIENT_ID:$CLIENT_SECRET" | ./jq -r '.access_token // empty')

# First, fetch all tracks from the playlist
TRACKS_JSON=$(./curl -s -X GET "https://api.spotify.com/v1/playlists/$PLAYLIST_ID/tracks" \
  -H "Authorization: Bearer $ACCESS_TOKEN")

# Extract all unique artist IDs
ARTIST_IDS=$(echo "$TRACKS_JSON" | ./jq -r '.items[].track.artists[].id' | sort | uniq | tr '\n' ',' | sed 's/,$//')

# Fetch all artist details in one batch request
ARTISTS_DATA=$(./curl -s -X GET "https://api.spotify.com/v1/artists?ids=$ARTIST_IDS" \
  -H "Authorization: Bearer $ACCESS_TOKEN")

# Create CSV file with header
echo "title,artist,artists,album,date,track,genres,length,albumart,id" > "$OUTPUT_FILE"

# Process the tracks and append to CSV
echo "$TRACKS_JSON" | ./jq -r --argjson artists "$ARTISTS_DATA" '
  .items[] | 
  [
    (.track.name // ""),
    (.track.artists[0].name // ""),
    ([.track.artists[].name] | join(", ") // ""),
    (.track.album.name // ""),
    (.track.album.release_date // ""),
    (.track.track_number // "" | tostring),
    (
      (.track.artists // []) as $track_artists |
      ($artists.artists // []) | map({id: .id, genres: (.genres // [])}) |
      [.[] | select(.id as $id | $track_artists | any(.id == $id))] |
      [.[].genres] | flatten | unique | join(", ") // ""
    ),
    ((.track.duration_ms // 0) / 1000 | floor | tostring),
    (.track.album.images[0]?.url // ""),
    (.track.id // "")
  ] | @csv' >> "$OUTPUT_FILE"

# Write the header to the temp file
head -n 1 "$OUTPUT_FILE" > "$OUTPUT_FILE.temp"

# Process the rest
tail -n +2 "$OUTPUT_FILE" | while IFS= read -r line; do
    # Parse CSV line with awk and return sanitized filename
    filename=$(echo "$line" | awk -F '","' '
    function sanitize(str) {
        gsub(/[\\/*?"<>|:]/, "", str)
        gsub(/  +/, " ", str)
        gsub(/^[ \t]+|[ \t]+$/, "", str)
        return str
    }
    {
        gsub(/^"/, "", $1)
        gsub(/"$/, "", $10)
        artist = sanitize($2)
        title = sanitize($1)
        print artist " - " title
    }')

    # Look for file in directory
    echo ---- looking for file
	if find "playlist_tracks" -type f -iname "$filename"* | grep -q .; then
        echo "Found match for: $filename â€” skipping"
    else
        echo "$line" >> "$OUTPUT_FILE.temp"
    fi
done

# Replace original file
mv "$OUTPUT_FILE.temp" "$OUTPUT_FILE"


./sldl "$OUTPUT_FILE" --user dzk --pass dzk --no-write-index --concurrent-downloads 8 --name-format "playlist_tracks\{uri}" --format mp3 --search-timeout 6000

# Function to sanitize variable
sanitize() {
  echo "$1" | sed 's/^"\|"$//g' | sed 's/[\\/*?"<>|:]//g' | sed 's/  */ /g' | sed 's/^ *//;s/ *$//'
}

tail -n +2 "$OUTPUT_FILE" | awk -F '","' '
function sanitize(str) {
    gsub(/[\\/*?"<>|:]/, "", str)  # Remove unwanted characters
    gsub(/  +/, " ", str)          # Replace multiple spaces with a single space
    gsub(/^[ \t]+|[ \t]+$/, "", str)  # Trim leading and trailing spaces
    return str
}
{
    # Remove leading and trailing quotes from fields
    gsub(/^"/, "", $1)
    gsub(/"$/, "", $10)

    # Sanitize artist and title
    sanitized_artist = sanitize($2)
    sanitized_title = sanitize($1)

    # Create sanitized filename
    filename = sanitized_artist " - " sanitized_title

    # Download album art
    system("./curl -o art.jpg \"" $9 "\"")

	system("ls -l art.jpg")
	
	# Run ffmpeg to update metadata
	system("./ffmpeg -i \"playlist_tracks/" $10 ".mp3\" -i art.jpg -map 0 -map 1 -c copy -c:v mjpeg -disposition:v attached_pic -id3v2_version 3 " \
		   "-metadata:s:v title=\"Album cover\" -metadata:s:v comment=\"Cover\" -metadata:s:v comment=\"Cover (front)\" " \
		   "-metadata title=\"" $1 "\" -metadata album_artist=\"" $2 "\" " \
		   "-metadata artist=\"" $3 "\" -metadata album=\"" $4 "\" " \
		   "-metadata date=\"" $5 "\" -metadata track=\"" $6 "\" " \
		   "-metadata genre=\"" $7 "\" " \
		   "-write_id3v1 1 \"playlist_tracks/" filename ".mp3\" > /dev/null 2>&1")

    # Remove original MP3 file
    system("rm \"playlist_tracks/" $10 ".mp3\"")

    # Remove art.jpg
    system("rm art.jpg")
}'